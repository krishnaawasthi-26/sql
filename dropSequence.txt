SQL Command #25: `DROP SEQUENCE`

The `DROP SEQUENCE` command removes an existing sequence from the database. It’s a Data Definition Language (DDL) command that deletes the sequence’s definition, stopping it from generating further values.

#### Syntax:
```sql
DROP SEQUENCE [IF EXISTS] sequence_name [, ...] [CASCADE | RESTRICT];
```

- **`sequence_name`**: The name of the sequence to delete (can specify multiple).
- **`IF EXISTS`**: Optional; prevents an error if the sequence doesn’t exist.
- **`CASCADE`**: Optional; drops dependent objects (e.g., columns using the sequence).
- **`RESTRICT`**: Optional; prevents dropping if dependencies exist (default).

#### Key Points:
1. **Purpose**: Deletes a sequence created with `CREATE SEQUENCE`.
2. **Destructive**: Removes the sequence permanently; no undo unless recreated.
3. **Support**: Common in PostgreSQL, Oracle, SQL Server (2012+); MySQL lacks sequences.
4. **Dependencies**: May affect columns or tables if `OWNED BY` was used.

---

### Components (Pseudo-Clauses)
`DROP SEQUENCE` is a single-line command, but I’ll break it into parts for clarity:
1. **`DROP SEQUENCE sequence_name [, ...]`**: Core command and target.
2. **`IF EXISTS`**: Optional error-handling condition.
3. **`CASCADE | RESTRICT`**: Optional dependency handling.

I’ll start with the first component now.

---

### Clause #1: `DROP SEQUENCE sequence_name [, ...]`

#### Description:
- **Purpose**: Specifies the sequence(s) to delete, allowing one or more sequences to be dropped in a single command.
- **Mandatory**: Yes; the command requires at least one sequence name.
- **Components**:
  - `DROP SEQUENCE`: Initiates the deletion.
  - `sequence_name`: The name of the sequence (e.g., `employee_id_seq`).
  - `[, ...]`: Optional; allows multiple sequences (e.g., `seq1, seq2`).

#### Keywords:
1. **`DROP`**:
   - **Meaning**: Instructs the DBMS to remove an object (here, a sequence).
   - **Use**: Starts the deletion process.
   - **Context**: Standard DDL keyword (e.g., `DROP TABLE`).

2. **`SEQUENCE`**:
   - **Meaning**: Identifies the object type as a sequence.
   - **Use**: Differentiates from `DROP TRIGGER`, `DROP FUNCTION`, etc.
   - **Context**: Targets a numeric generator.

---

### Example and Explanation
**Setup**:
```sql
CREATE SEQUENCE employee_id_seq START WITH 1000;
CREATE TABLE employees (
    employee_id INT DEFAULT nextval('employee_id_seq') PRIMARY KEY,
    name VARCHAR(100)
);
```

**Basic Example (PostgreSQL)**:
```sql
DROP SEQUENCE employee_id_seq;
```
- **Clause Breakdown**:
  - **`DROP`**: Initiates the deletion.
  - **`SEQUENCE`**: Specifies a sequence.
  - **`employee_id_seq`**: Names the sequence to delete.
- **Action**: 
  - Removes `employee_id_seq` from the database.
- **Result**: 
  - `SELECT nextval('employee_id_seq')` fails (sequence doesn’t exist).
  - Fails if `employee_id_seq` doesn’t exist without `IF EXISTS`.
  - May fail if dependencies exist (e.g., `OWNED BY` column).

**Multiple Sequences**:
```sql
CREATE SEQUENCE order_id_seq;
DROP SEQUENCE employee_id_seq, order_id_seq;
```
- **Explanation**:
  - **`employee_id_seq, order_id_seq`**: Drops both sequences in one command.
  - Fails if any sequence doesn’t exist (unless `IF EXISTS` is used).

**Schema-Qualified Example**:
```sql
DROP SEQUENCE hr.employee_id_seq;
```
- **Explanation**:
  - Targets `employee_id_seq` in the `hr` schema.
  - Ensures clarity in multi-schema databases.

---

### Notes:
- **Dependencies**: 
  - If a sequence is `OWNED BY` a column, dropping it may require `CASCADE` (next clause).
  - Independent sequences drop without issue.
- **Database Variations**:
  - **PostgreSQL**: `DROP SEQUENCE employee_id_seq;`.
  - **SQL Server**: `DROP SEQUENCE employee_id_seq;`.
    ```sql
    DROP SEQUENCE dbo.employee_id_seq;
    ```
  - **Oracle**: `DROP SEQUENCE employee_id_seq;`.
  - **MySQL**: No sequences; uses `ALTER TABLE` to remove `AUTO_INCREMENT`.
- **Default Behavior**: Fails if the sequence doesn’t exist unless `IF EXISTS` is used.

-----------------------------------
  Let’s continue with the next component of the `DROP SEQUENCE` command! We’ve covered the first "clause" (`DROP SEQUENCE sequence_name [, ...]`), so now we’ll move to the second component: `IF EXISTS`. I’ll explain its purpose, keywords, and provide an example, treating it as a pseudo-clause in our breakdown of command #25 of the 33 total commands. We have 8 commands left after this.

---

### Clause #2: `IF EXISTS`

#### Description:
- **Purpose**: Prevents an error if the specified sequence does not exist in the database. It ensures the `DROP SEQUENCE` command executes safely, even if the sequence’s existence is uncertain.
- **Mandatory**: No; optional. Without it, an error occurs if the sequence isn’t found.
- **Component**:
  - `IF EXISTS`: The condition ensuring the drop only proceeds if the sequence exists.

#### Keywords:
1. **`IF`**:
   - **Meaning**: Introduces a conditional check.
   - **Use**: Tests whether the sequence exists before attempting deletion.
   - **Context**: Common in SQL for conditional operations (e.g., `IF EXISTS` in `DROP TRIGGER`).

2. **`EXISTS`**:
   - **Meaning**: Verifies the presence of the specified sequence in the database.
   - **Use**: Allows the command to execute silently if the sequence doesn’t exist, avoiding an error.
   - **Context**: Paired with `IF` in DDL commands for safety.

---

### Example and Explanation
**Setup**:
```sql
CREATE SEQUENCE employee_id_seq START WITH 1000;
CREATE TABLE employees (
    employee_id INT DEFAULT nextval('employee_id_seq') PRIMARY KEY,
    name VARCHAR(100)
);
```

**With IF EXISTS**:
```sql
DROP SEQUENCE IF EXISTS employee_id_seq;
```
- **Clause Breakdown**:
  - **`IF`**: Sets up the condition.
  - **`EXISTS`**: Checks if `employee_id_seq` exists.
- **Action**: 
  - Verifies `employee_id_seq` exists and deletes it.
- **Result**: 
  - `employee_id_seq` is removed; `SELECT nextval('employee_id_seq')` fails.
  - If rerun, no error occurs (unlike without `IF EXISTS`).

**Non-Existent Sequence**:
```sql
DROP SEQUENCE IF EXISTS non_existent_seq;
```
- **Explanation**: 
  - `non_existent_seq` doesn’t exist.
  - Without `IF EXISTS`: Error (e.g., "sequence non_existent_seq does not exist" in PostgreSQL).
  - With `IF EXISTS`: Executes silently, no error.
- **Result**: No change (sequence wasn’t there), but no failure.

**Multiple Sequences with IF EXISTS**:
```sql
DROP SEQUENCE IF EXISTS employee_id_seq, order_id_seq;
```
- **Explanation**: 
  - Drops both sequences if they exist; skips any that don’t without error.
  - Useful in scripts for robust cleanup.

---

### Notes:
- **Behavior**: 
  - Enhances script reliability, especially for database migrations or cleanup.
  - Doesn’t address dependencies (covered in the next clause).
- **Database Variations**:
  - **PostgreSQL**: `DROP SEQUENCE IF EXISTS employee_id_seq;`.
  - **SQL Server**: `IF EXISTS (SELECT * FROM sys.sequences WHERE name = 'employee_id_seq') DROP SEQUENCE employee_id_seq;`.
  - **Oracle**: `DROP SEQUENCE employee_id_seq;` (no native `IF EXISTS`, requires PL/SQL check).
  - **MySQL**: No sequences; `ALTER TABLE` for `AUTO_INCREMENT` removal.
- **Scope**: Checks existence of the sequence in the specified schema.

---------------------------------------

### Clause #3: `CASCADE | RESTRICT`

#### Description:
- **Purpose**: Modifies the behavior of `DROP SEQUENCE` by specifying how to handle dependencies, such as columns that rely on the sequence (e.g., via `OWNED BY` or `DEFAULT nextval`). This determines whether the drop proceeds by removing dependent objects or is blocked.
- **Mandatory**: No; optional. Without it, the default behavior is typically `RESTRICT` (fails if dependencies exist).
- **Components**:
  - `CASCADE`: Drops the sequence and removes dependent objects (e.g., column defaults).
  - `RESTRICT`: Prevents dropping if dependencies exist (default in most systems).

#### Keywords:
1. **`CASCADE`**:
   - **Meaning**: Drops the sequence and any dependent objects (e.g., column `DEFAULT` settings or ownership links).
   - **Use**: Ensures a clean deletion by automatically resolving dependencies.
   - **Context**: Common in DDL for recursive deletion (e.g., `DROP TABLE ... CASCADE`).

2. **`RESTRICT`**:
   - **Meaning**: Blocks the drop if other objects depend on the sequence, requiring manual resolution.
   - **Use**: Protects against unintended consequences by ensuring dependencies are unaffected.
   - **Context**: Default behavior in many DBMSs; explicit in some.

---

### Example and Explanation
**Setup**:
```sql
CREATE SEQUENCE employee_id_seq START WITH 1000;
CREATE TABLE employees (
    employee_id INT DEFAULT nextval('employee_id_seq') PRIMARY KEY,
    name VARCHAR(100)
);
ALTER SEQUENCE employee_id_seq OWNED BY employees.employee_id;
```

**With CASCADE**:
```sql
DROP SEQUENCE employee_id_seq CASCADE;
```
- **Clause Breakdown**:
  - **`CASCADE`**: Deletes `employee_id_seq` and resolves dependencies.
- **Action**: 
  - Removes `employee_id_seq`.
  - Drops the `DEFAULT nextval('employee_id_seq')` setting from `employees.employee_id` (since it’s owned).
- **Result**: 
  - `employee_id_seq` is gone; `SELECT nextval('employee_id_seq')` fails.
  - `employees.employee_id` no longer has a default value.
  - `INSERT INTO employees (name) VALUES ('Alice');` requires an explicit `employee_id`.

**With RESTRICT**:
```sql
DROP SEQUENCE employee_id_seq RESTRICT;
```
- **Clause Breakdown**:
  - **`RESTRICT`**: Prevents deletion if dependencies exist.
- **Action**: 
  - Checks for dependencies (e.g., `employees.employee_id` via `OWNED BY`).
  - Fails because `employee_id_seq` is owned by `employees.employee_id`.
- **Result**: 
  - Error (e.g., "cannot drop sequence employee_id_seq because other objects depend on it" in PostgreSQL).
  - `employee_id_seq` remains intact.

**With IF EXISTS and CASCADE**:
```sql
DROP SEQUENCE IF EXISTS employee_id_seq CASCADE;
```
- **Explanation**: 
  - Combines `IF EXISTS` (no error if absent) and `CASCADE` (drops dependencies).
  - Deletes `employee_id_seq` and its dependencies if it exists; otherwise, does nothing.

**No Dependencies**:
```sql
CREATE SEQUENCE standalone_seq START WITH 1;
DROP SEQUENCE standalone_seq RESTRICT;
```
- **Explanation**: 
  - No dependencies (not owned by any column).
  - Succeeds with `RESTRICT` or `CASCADE` (no difference).

---

### Notes:
- **Dependencies**: 
  - Common via `OWNED BY` (PostgreSQL) or `DEFAULT nextval` in columns.
  - `CASCADE` removes the sequence and clears column defaults or ownership.
  - `RESTRICT` ensures safety by requiring manual dependency resolution.
- **Database Variations**:
  - **PostgreSQL**: `RESTRICT` default; `CASCADE` explicit.
    ```sql
    DROP SEQUENCE employee_id_seq CASCADE;
    ```
  - **SQL Server**: No `CASCADE`/`RESTRICT`; fails if dependencies exist (rare for sequences).
    ```sql
    DROP SEQUENCE employee_id_seq;
    ```
  - **Oracle**: No `CASCADE`/`RESTRICT`; sequences are standalone.
    ```sql
    DROP SEQUENCE employee_id_seq;
    ```
  - **MySQL**: No sequences; `ALTER TABLE` removes `AUTO_INCREMENT`.
- **Use Case**: 
  - `CASCADE`: Cleanup when removing a table’s ID system.
  - `RESTRICT`: Prevent accidental loss of column defaults.
-------------------------------------
